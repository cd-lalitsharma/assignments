package transactionLimit;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.io.IOException;

public class Main {
    
    
    public static void main(String[] args) {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("spring.xml");
    
        TransactionLimit transactionLimit = applicationContext.getBean(TransactionLimit.class);
        
        //handling runtime exception generated by unfullfilling conditions like writing on readonly mode and
        //transaction taking more time than expected timeout for transaction
        try{
            transactionLimit.readOnly();
            transactionLimit.timeOutTransaction();
        }catch(RuntimeException e){
//            System.log(e.printStackTrace());
        }
    
        //This transaction throws IOexception but query wont work because its rollingbackfor IOException
        try {
            transactionLimit.rollBackForIo();
        } catch (IOException e) {
            e.printStackTrace();
        }
    
        //This transaction throws runtime exception but query still work because its not rollingbackfor runtimeException
        transactionLimit.noRollBackForRuntime();
    }
}
